---
alwaysApply: false
---

# Testing Rules for CRM Project

경계 테스트는 특히 신경써서 구현해줘

## Testing Library 사용 규칙

### 1. userEvent 사용

- **fireEvent 대신 userEvent 사용**
- 실제 사용자와 유사한 상호작용을 시뮬레이션
- 비동기 이벤트이므로 `async/await` 사용

```tsx
// ✅ 권장
const user = userEvent.setup();
await user.type(input, 'test');

// ❌ 지양
fireEvent.change(input, { target: { value: 'test' } });
```

### 2. 요소 선택 방식

- **within()과 getByRole() 조합 사용**
- 더 정확하고 안정적인 요소 선택을 위해

#### Input

```tsx
// ✅ 권장
const input = within(
  screen.getByLabelText('스태프명'),
).getByRole('textbox');

// ❌ 지양
const input = screen.getByLabelText('스태프명') as HTMLInputElement;
```

#### Dropdown

```typescript
await user.click(screen.getByRole('combobox', { name: '드롭다운 라벨' }));
```

```typescript
await user.click(screen.getByRole('option', { name: '선택할 옵션명' }));
```

### 3. 테스트 데이터 생성

- **repeat() 사용하여 테스트 데이터 생성**
- 하드코딩보다 가독성과 유지보수성 향상

```tsx
// ✅ 권장
const longName = '가'.repeat(21);

// ❌ 지양
const longName = '가나다라마바사아자차카타파하거너더러머버서어저처커터퍼허';
```

### 4. 검증 방식

- **toHaveValue() 사용**
- Testing Library 권장 방식으로 더 적절한 검증

```tsx
// ✅ 권장
expect(input).toHaveValue('expected value');

// ❌ 지양
expect(input.value).toBe('expected value');
```

## 테스트 구조

### 1. 렌더링 함수 분리

- **재사용 가능한 renderForm 함수 생성**
- 테스트 간 일관성 유지

```tsx
const renderForm = () => {
  return render(<QuickStaffRegisterForm />);
};

describe('QuickStaffRegisterForm', () => {
  it('should render', () => {
    renderForm();
  });
});
```

### 2. 테스트 그룹화

- **describe 블록으로 관련 테스트 그룹화**
- 가독성과 유지보수성 향상

```tsx
describe('스태프명 입력 검증', () => {
  it('최대 20자 이하로 입력되어야 한다', async () => {
    // 테스트 로직
  });

  it('한글/영문만 입력이 가능해야 한다', async () => {
    // 테스트 로직
  });
});
```

## Mock 사용 규칙

### 1. Mock 사용 지양

- **실제 컴포넌트 동작을 테스트할 때는 Mock 사용 지양**
- 실제 사용자 시나리오와 유사한 테스트 환경 구성

### 2. Mock이 필요한 경우

- 외부 API 호출
- 복잡한 의존성
- 테스트 실행 시간 단축이 필요한 경우

## 접근성 테스트

### 1. aria-label 사용

- **접근성을 고려한 요소 선택**
- 스크린 리더 호환성 보장

```tsx
const input = screen.getByLabelText('스태프명');
```

### 2. 키보드 내비게이션 테스트

- **Tab 키를 통한 포커스 이동 테스트**
- 키보드 접근성 검증

```tsx
await user.tab();
expect(input).toHaveFocus();
```

## 성능 테스트

### 1. 불필요한 리렌더링 방지

- **React.memo 적절한 사용**
- 컴포넌트 성능 최적화 검증

### 2. 메모이제이션 검증

- **useMemo, useCallback 동작 검증**
- 의존성 배열 변경 시 재계산 확인

## 에러 처리 테스트

### 1. 유효성 검사 테스트

- **잘못된 입력에 대한 에러 메시지 검증**
- 사용자 피드백 확인

```tsx
await user.type(input, 'invalid input');
expect(screen.getByText('에러 메시지')).toBeInTheDocument();
```

### 2. 네트워크 에러 테스트

- **API 호출 실패 시나리오 테스트**
- 에러 상태 UI 검증

## 테스트 파일 네이밍

- **컴포넌트명.test.tsx** 형식 사용
- 테스트 파일은 테스트 대상과 동일한 디렉토리에 위치

## 테스트 커버리지

- **핵심 비즈니스 로직 100% 커버리지 목표**
- 사용자 시나리오 기반 테스트 우선
- Edge case 테스트 포함

## 근거와 의도

이러한 테스트 규칙은 **Testing Library의 권장 사항을 따르며**, **실제 사용자와 유사한 상호작용을 시뮬레이션**하여 더 신뢰할 수 있는 테스트를 작성하기 위함입니다. 특히 `userEvent`와 `within()` 사용은 **접근성과 안정성을 모두 고려한 최적의 방법**입니다.
description:
globs:
alwaysApply: false

---
