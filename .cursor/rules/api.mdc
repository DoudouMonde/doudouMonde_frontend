---
description: Backend API + DTO + MSW Mock 규칙(생성·수정 시 이미지 확인 포함)
globs:
  - 'src/**/_api/**/*.ts'
alwaysApply: false
language: ko
intent:
  - 'API 컨트롤러/서비스/DTO/모킹을 생성·수정할 때 일관된 규칙 적용'
  - '등록/수정 API에서 이미지 필요 여부를 모호하면 먼저 질문'
---

# 원칙(Principles)

1. **등록·수정 API 이미지 여부**

   - 등록/수정 API 구현 시, 요청 본문에 이미지가 **필수인지 불명확하면 먼저 질문**한다.
   - 질문 예: "이 API의 Create/Update 요청에 이미지(파일 업로드 또는 URL)가 필수인가요? 선택인가요?"

2. **DTO 작성 규칙**

   - DTO는 **`interface`** 또는 **`type`**으로 작성한다.
   - 위치: `src/**/_apis/dto/`
   - 네이밍:
     - **목록 조회 응답**: `*ListResponse`
     - **목록 아이템**: `*ItemResponse`
     - **상세 조회 응답**: `*DetailResponse`
     - **등록 요청**: `Create*Request`
     - **수정 요청**: `Update*Request`

3. **Multipart/Form-Data API 표준**

   **Request DTO 구조:**

   ```ts
   export type Create*Request = {
     request: {
       // JSON 데이터 필드들
       field1: string;
       field2: number;
     };
     profileImage?: File | null; // 단일 파일 (선택적)
     files?: File[] | null; // 다중 파일 (선택적)
   };
   ```

   **API 호출 방식:**

   ```ts
   const formData = new FormData();
   const blob = new Blob([JSON.stringify(requestData.request)], {
     type: 'application/json',
   });
   formData.append('request', blob);

   if (requestData.profileImage) {
     formData.append('profileImage', requestData.profileImage);
   }

   const response = await authInstance.post(url, formData);
   ```

4. **API 응답 규칙**

   - **페이지네이션**: `PaginatedData<T> = { page: PageMetadata; content: T[]; }`
   - **비페이지네이션**: 배열만 반환 `T[]`

5. **Mock API(MSW) 규칙**

   - 응답 형식: `{ code, message, data }` 통일
   - **Multipart Mock 처리:**

   ```ts
   http.post(`${baseUrl}/api/path`, async ({ request }) => {
     const formData = await request.formData();
     const requestBlob = formData.get('request') as Blob;
     const requestText = await requestBlob.text();
     const requestData =
       (JSON.parse(requestText) as Create) * Request['request'];
     const file = formData.get('profileImage') as File | null;

     // 중복 체크만 수행 (필수 필드 검증, 파일 검증, 500 에러 처리 제외)
     // 성공 응답 반환
   });
   ```

---

# 공용 타입

```ts
export type PageMetadata = {
  number: number;
  size: number;
  totalElements: number;
  totalPages: number;
};

export type PaginatedData<T> = {
  page: PageMetadata;
  content: T[];
};
```

# 자동 생성 규칙

**파일 업로드 API 요청 시:**

1. DTO는 `{ request: {}, profileImage?: File | null }` 구조로 생성
2. API 함수는 FormData + Blob 방식 사용
3. Mock은 중복 체크만 수행, 나머지 검증 생략
